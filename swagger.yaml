swagger: '2.0'
info:
  title: Users, Posts, and Comments API
  version: 1.0.0

tags:
  - name: auth
    description: Authentication API
  - name: users
    description: Users API
  - name: posts
    description: Posts API
  - name: comments
    description: Comments API

securityDefinitions:
  cookieAuth:
    type: apiKey
    in: cookie
    name: Authorization

paths:
  /login:
    post:
      tags:
        - auth
      summary: User Login
      parameters:
        - name: body
          in: body
          description: User Login Data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          description: 'OK'
          headers:
            Set-Cookie:
              type: string
              description: |
                Authorization cookie containing a JSON Web Token (JWT).
                - Token format: JWT
                - HTTP-only: true
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /signup:
    post:
      tags:
        - auth
      summary: User Signup
      parameters:
        - name: body
          in: body
          description: User Signup Data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
              username:
                type: string
      responses:
        201:
          description: 'Created'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /logout:
    post:
      tags:
        - auth
      summary: User Logout
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
              message:
                type: string
                example: 'logout'
          headers:
            Set-Cookie:
              type: string
              description: |
                Clears the Authorization cookie.
                - Max-age: 0
        500:
          description: 'Server Error'
  /users:
    get:
      tags:
        - users
      summary: Find All Users
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        500:
          description: 'Server Error'
    post:
      tags:
        - users
      summary: Add User
      security:
        - cookieAuth: []
      parameters:
        - name: body
          in: body
          description: User Data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
              username:
                type: string
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/User'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    patch:
      tags:
        - users
      summary: Update User By Id
      security:
        - cookieAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          type: integer
        - name: password
          in: formData
          description: User Password
          required: false
          type: string
        - name: username
          in: formData
          description: User Username
          required: false
          type: string
        - name: bio
          in: formData
          description: User Bio
          required: false
          type: string
        - name: profilePic
          in: formData
          description: User Profile Picture
          required: false
          type: file
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    delete:
      tags:
        - users
      summary: Delete User By Id
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /posts:
    get:
      tags:
        - posts
      summary: Find All Posts
      parameters:
        - name: limit
          in: query
          description: Number of posts to retrieve
          type: integer
        - name: cursor
          in: query
          description: Cursor for pagination
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        500:
          description: 'Server Error'
    post:
      tags:
        - posts
      summary: Create Post
      security:
        - cookieAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: title
          in: formData
          description: Post Title
          required: true
          type: string
        - name: content
          in: formData
          description: Post Content
          required: true
          type: string
        - name: excerpt
          in: formData
          description: Post Excerpt
          required: false
          type: string
        - name: thumbnail
          in: formData
          description: Post Thumbnail Image
          required: false
          type: file
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/Post'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /posts/{id}:
    get:
      tags:
        - posts
      summary: Find Post By Id
      parameters:
        - name: id
          in: path
          description: Post Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Post'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
    patch:
      tags:
        - posts
      summary: Update Post By Id
      security:
        - cookieAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: path
          description: Post Id
          required: true
          type: integer
        - name: title
          in: formData
          description: Post Title
          required: false
          type: string
        - name: content
          in: formData
          description: Post Content
          required: false
          type: string
        - name: excerpt
          in: formData
          description: Post Excerpt
          required: false
          type: string
        - name: thumbnail
          in: formData
          description: Post Thumbnail Image
          required: false
          type: file
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Post'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    delete:
      tags:
        - posts
      summary: Delete Post By Id
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          description: Post Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  /comments:
    get:
      tags:
        - comments
      summary: Find All Comments
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        500:
          description: 'Server Error'
    post:
      tags:
        - comments
      summary: Create Comment
      security:
        - cookieAuth: []
      parameters:
        - name: body
          in: body
          description: Comment Data
          required: true
          schema:
            type: object
            properties:
              content:
                type: string
              postId:
                type: integer
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  /comments/{id}:
    get:
      tags:
        - comments
      summary: Find Comment By Id
      parameters:
        - name: id
          in: path
          description: Comment Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Comment'
        404:
          description: 'Not Found'
        500:
          description: 'Server Error'
    patch:
      tags:
        - comments
      summary: Update Comment By Id
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          description: Comment Id
          required: true
          type: integer
        - name: body
          in: body
          description: Comment Data
          required: true
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'
    delete:
      tags:
        - comments
      summary: Delete Comment By Id
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          description: Comment Id
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        description: User Id
      email:
        type: string
        description: User Email
      username:
        type: string
        description: User Username
      bio:
        type: string
        description: User Bio
      profilePic:
        type: string
        description: User Profile Picture
      isAdmin:
        type: boolean
        description: User Admin Status

  Post:
    type: object
    properties:
      id:
        type: integer
        description: Post Id
      title:
        type: string
        description: Post Title
      content:
        type: string
        description: Post Content
      excerpt:
        type: string
        description: Post Excerpt
      author:
        $ref: '#/definitions/User'
      authorId:
        type: integer
        description: Author Id
      thumbnail:
        type: string
        description: Post Thumbnail
      createdAt:
        type: string
        format: date-time
        description: Post Creation Date
      updatedAt:
        type: string
        format: date-time
        description: Post Update Date
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'

  Comment:
    type: object
    properties:
      id:
        type: integer
        description: Comment Id
      content:
        type: string
        description: Comment Content
      postId:
        type: integer
        description: Associated Post Id
      commenterId:
        type: integer
        description: Commenter Id

schemes:
  - https
  - http